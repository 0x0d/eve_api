<?php
/**
 * @file
 * Install, update, and uninstall functions for the Omni EVE API module.
 */

/**
 * Implements hook_schema().
 */
function eve_api_schema() {
  $schema['eve_api_api_keys'] = array(
    'description' => 'This table holds all the api\'s associated with all the accounts.',
    'fields' => array(
      'apiID' => array(
        'description' => 'The link between api and the character.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The link between api and drupal account.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'keyID' => array(
        'description' => 'The Key ID of the EVE API.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vCode' => array(
        'description' => 'The Verification Code of the EVE API.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'errorID' => array(
        'description' => 'Error code to identify any problems with a registered api key.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'When the API was last updated.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      ),
      'created' => array(
        'description' => 'When the API was initially created.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      ),
    ),
    'unique keys' => array('apiID' => array('apiID')),
    'primary key' => array('apiID'),
  );

  $schema['eve_api_characters'] = array(
    'description' => 'This table holds all the characters retrieved from the API\'s.',
    'fields' => array(
      'characterID' => array(
        'description' => 'The unique Character ID associated with the EVE Character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The link between api and drupal account.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'apiID' => array(
        'description' => 'The link between api and the character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'characterName' => array(
        'description' => 'The EVE Character Name',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'corporationID' => array(
        'description' => 'The Corporation ID the Character is currently associated with in EVE.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'corporationName' => array(
        'description' => 'The Corporation Name the Character is currently associated with in EVE.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'corporationTicker' => array(
        'description' => 'The Corporation Ticker the Character is currently associated with in EVE.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ),
      'allianceID' => array(
        'description' => 'The Alliance ID the Character is currently associated with in EVE.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'allianceName' => array(
        'description' => 'The Alliance Name the Character is currently associated with in EVE.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => FALSE,
      ),
      'allianceTicker' => array(
        'description' => 'The Alliance Ticker the Character is currently associated with in EVE.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'errorID' => array(
        'description' => 'Error code to identify any problems with a registered characters.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'deleted' => array(
        'description' => 'Identifies if the character was removed from the key at some point.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array('characterID' => array('characterID')),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_characters_roles'] = array(
    'description' => 'This table holds all the roles for all characters retrieved from the API.',
    'fields' => array(
      'characterID' => array(
        'description' => 'The unique Character ID associated with the EVE Character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The link between api and drupal account.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'apiID' => array(
        'description' => 'The link between api and the character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The character role type.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'roleID' => array(
        'description' => 'The character role ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'roleName' => array(
        'description' => 'The Corporation Name the Character is currently associated with in EVE.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'errorID' => array(
        'description' => 'Error code to identify any problems with a registered characters.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'deleted' => array(
        'description' => 'Identifies if the character was removed from the key at some point.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array('characterid' => array('characterID')),
  );

  $schema['eve_api_characters_roles_whitelist'] = array(
    'description' => 'This table holds all the roles for all characters retrieved from the API.',
    'fields' => array(
      'characterID' => array(
        'description' => 'The unique Character ID associated with the EVE Character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'isCEO' => array(
        'description' => 'Character is a CEO.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'isDirector' => array(
        'description' => 'Character is a Director.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array('characterID' => array('characterID')),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_whitelist'] = array(
    'description' => 'This table holds all the whitelisted character ID\'s and name.',
    'fields' => array(
      'characterID' => array(
        'description' => 'The unique Character ID associated with the EVE Character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'characterName' => array(
        'description' => 'The EVE Character Name',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'deleted' => array(
        'description' => 'Identifies if the character was removed from the whitelist at some point.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array('characterID' => array('characterID')),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_access_mask'] = array(
    'description' => 'This table holds all the access mask retrieved from the API.',
    'fields' => array(
      'accessmask' => array(
        'description' => 'The unique Access Mask ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The Type of Access Mask.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The Name of the Access Mask.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The description of the Access Mask.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array('accessmask' => array('accessmask')),
    'primary key' => array('accessmask'),
  );

  $schema['eve_api_blue_standings'] = array(
    'description' => 'This table holds all the standings of the current alliance or corporation.',
    'fields' => array(
      'contactID' => array(
        'description' => 'The unique ID for a corporation, alliance, or character.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'contactName' => array(
        'description' => 'The name of the corporation, alliance, or character.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'standing' => array(
        'description' => 'The current standing of the corporation, alliance, or character.',
        'type' => 'float',
        'not null' => TRUE,
        'precision' => 3,
        'scale' => 1,
        'unsigned' => FALSE,
        'default' => 0.0,
      ),
      'deleted' => array(
        'description' => 'Identifies if the corporation, alliance, or character was removed from the alliance at some point.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'manual' => array(
        'description' => 'Identifies if the standing was manually added.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'checked' => array(
        'description' => 'Used to check for updates.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array('contactID' => array('contactID')),
    'primary key' => array('contactID'),
  );

  $schema['eve_api_alliance_corporations'] = array(
    'description' => 'This table holds all the corporations in the alliance.',
    'fields' => array(
      'corporationID' => array(
        'description' => 'The Corporation ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'The Drupal role ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'corporationName' => array(
        'description' => 'The Corporation Name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'corporationTicker' => array(
        'description' => 'The Corporation Ticker.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ),
      'ceoID' => array(
        'description' => 'The CEO ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'ceoName' => array(
        'description' => 'The CEO Name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'deleted' => array(
        'description' => 'Identifies if the corporation was removed from the alliance at some point.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'manual' => array(
        'description' => 'Identifies if the corporation was manually added.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array('corporationID' => array('corporationID')),
    'primary key' => array('corporationID'),
  );

  $schema['eve_api_alliance_info'] = array(
    'description' => 'This table holds all the alliance tickers.',
    'fields' => array(
      'allianceID' => array(
        'description' => 'The Alliance ID.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'allianceTicker' => array(
        'description' => 'The Alliance Ticker.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ),
      'allianceName' => array(
        'description' => 'The Alliance Name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array('allianceID' => array('allianceID')),
    'primary key' => array('allianceID'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function eve_api_install() {
  db_add_field('users', 'characterID', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'length' => 11,
    'description' => 'Main EVE Character ID',
  ));

  $roles = array(
    'eve_api_blue_role' => 'Alliance Blue',
    'eve_api_alliance_role' => 'Alliance Member',
    'eve_api_unverified_role' => 'Unverified',
    'eve_api_ceo_role' => 'CEO',
    'eve_api_director_role' => 'Director',
  );

  foreach ($roles as $variable => $role) {
    if ($role_data = user_role_load_by_name($role)) {
      variable_set($variable, (int) $role_data->rid);
    }
    else {
      $user_role = new stdClass();
      $user_role->name = $role;
      user_role_save($user_role);
      $role_data = user_role_load_by_name($role);
      variable_set($variable, (int) $role_data->rid);
    }
  }

  variable_set('eve_api_enable', FALSE);
  variable_set('eve_api_first_run', FALSE);

  // We set this because we use 128x128 for EVE avatar's.
  variable_set('user_picture_dimensions', '128x128');

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_fetch');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_sync');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_mask_sync');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $queue->createQueue();
}

/**
 * Implements hook_uninstall().
 */
function eve_api_uninstall() {
  db_drop_field('users', 'characterID');

  variable_del('eve_api_version');
  variable_del('eve_api_user_picture_dimensions');
  variable_del('eve_api_avatar_https');
  variable_del('eve_api_avatar_http');
  variable_del('eve_api_enable');
  variable_del('eve_api_enable_cron');
  variable_del('eve_api_first_run');
  variable_del('eve_api_alliance_role');
  variable_del('eve_api_unverified_role');
  variable_del('eve_api_ceo_role');
  variable_del('eve_api_director_role');
  variable_del('eve_api_corp_keyid');
  variable_del('eve_api_corp_vcode');
  variable_del('eve_api_access_mask');
  variable_del('eve_api_require_expires');
  variable_del('eve_api_require_type');
  variable_del('eve_api_required_standing');
  variable_del('eve_api_allianceID');
  variable_del('eve_api_corporationID');
  variable_del('eve_api_api_alliance_fetch_cron_time');
  variable_del('eve_api_api_alliance_fetch_cron_next');
  variable_del('eve_api_api_alliance_sync_cron_time');
  variable_del('eve_api_api_alliance_sync_cron_next');
  variable_del('eve_api_api_mask_cron_time');
  variable_del('eve_api_api_mask_cron_next');
  variable_del('eve_api_api_users_cron_time');
  variable_del('eve_api_api_users_cron_next');

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_fetch');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_sync');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_mask_sync');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $queue->deleteQueue();
}

/**
 * Implements hook_requirements().
 */
function eve_api_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    $has_curl = function_exists('curl_init');
    $open_basedir = ini_get('open_basedir');

    $requirements['curl'] = array(
      'title' => $t('cURL'),
      'value' => $has_curl ? $t('Enabled') : $t('Not found'),
    );

    if (!$has_curl) {
      $requirements['curl']['severity'] = REQUIREMENT_WARNING;
      $requirements['curl']['description'] = $t('EVE API prefers cURL, please install the PHP <a href="@curl_url">cURL</a> library.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
    }

    $requirements['php_open_basedir'] = array(
      'title' => $t('PHP open_basedir restriction'),
      'value' => $open_basedir ? $t('Enabled') : $t('Disabled'),
    );

    if ($open_basedir) {
      $requirements['php_open_basedir']['severity'] = REQUIREMENT_WARNING;
      $requirements['php_open_basedir']['description'] = $t('EVE API prefers cURL, cURL requires the PHP <a href="@open_basedir-url">open_basedir</a> restriction to be disabled. Check your webserver configuration or contact your web host.', array('@open_basedir-url' => 'http://php.net/manual/en/ini.core.php#ini.open-basedir'));
    }

    // Report Omni EVE API version.
    $requirements['eve_api'] = array(
      'title' => $t('Omni EVE API'),
      'value' => eve_api_version(),
      'severity' => REQUIREMENT_INFO,
    );
  }

  return $requirements;
}
