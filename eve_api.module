<?php
/**
 * @file
 * The main file for Omni EVE API, where all the magic happens.
 */

require_once dirname(__FILE__) . '/eve_api.api.inc';
require_once dirname(__FILE__) . '/eve_api.cron.inc';

/**
 * Return the version number.
 * 
 * x.x.x.x
 * | | | `-- Patch Version Number.
 * | | |
 * | | `---- 0 = Alpha.
 * | |       1 = Beta.
 * | |       2 = RC.
 * | |       3 = Release.
 * | |
 * | `------ Minor Version Change.
 * |
 * `-------- Major Version Change.
 */
function eve_api_version() {
  return '2.0.1.6';
}

/**
 * We need our own Exception, to the Exception.
 */
class EveApiException extends Exception {
}

/**
 * Implements hook_menu_alter().
 */
function eve_api_menu_alter(&$items) {
  // Ctools registration wizard for standard registration.
  // Overrides default router item defined by core user module.
  $items['user/register']['page callback'] = array('eve_api_register_wizard');
  // Pass the "first" step key to start the form on step 1 if no step has been
  // specified.
  $items['user/register']['page arguments'] = array('enter_api');
  $items['user/register']['file'] = 'eve_api.register.inc';
  $items['user/register']['file path'] = drupal_get_path('module', 'eve_api');

  return $items;
}

/**
 * Implements hook_menu().
 */
function eve_api_menu() {
  $items = array();

  $items['user/register/%'] = array(
    'title' => 'Create New Account',
    'page callback' => 'eve_api_register_wizard',
    'page arguments' => array(2),
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
    'file' => 'eve_api.register.inc',
  );

  $admin_base = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer eve_api settings'),
    'file' => 'eve_api.admin.inc',
  );

  $user_base = array(
    'page callback' => 'drupal_get_form',
    'access callback' => 'eve_api_edit_access',
    'access arguments' => array(1),
    'file' => 'eve_api.user.inc',
  );

  $items['admin/eve_api'] = array(
    'title' => 'EVE API',
    'description' => 'Configure and setup EVE API.',
    'page callback' => 'system_admin_menu_block_page',
    'weight' => 0,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ) + $admin_base;

  $items['admin/eve_api/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure and setup EVE API.',
    'page arguments' => array('eve_api_admin_settings_form'),
    'weight' => 0,
  ) + $admin_base;

  if (variable_get('eve_api_enable', FALSE)) {
    $items['admin/eve_api/roles'] = array(
      'title' => 'Roles',
      'description' => 'Configure default roles for various roles required for EVE API to function.',
      'page arguments' => array('eve_api_admin_roles_form'),
      'weight' => 10,
    ) + $admin_base;

    $items['admin/eve_api/registration'] = array(
      'title' => 'Registration',
      'description' => 'Modify the requirements to register.',
      'page arguments' => array('eve_api_admin_registration_form'),
      'weight' => 20,
    ) + $admin_base;

    $items['admin/eve_api/list_blues'] = array(
      'title' => 'Blues',
      'description' => 'Edit Blue standings.',
      'page arguments' => array('eve_api_admin_list_blues_form'),
      'weight' => 50,
    ) + $admin_base;

    $items['admin/eve_api/list_blues/add_blue'] = array(
      'title' => 'Add Blue',
      'description' => 'Add a new Blue standing.',
      'page arguments' => array('eve_api_admin_add_blues_form'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 55,
    ) + $admin_base;

    $items['admin/eve_api/list_whitelist'] = array(
      'title' => 'Whitelist',
      'description' => 'Edit Character Whitelist.',
      'page arguments' => array('eve_api_admin_list_whitelist_form'),
      'weight' => 60,
    ) + $admin_base;

    $items['admin/eve_api/list_whitelist/add_whitelist'] = array(
      'title' => 'Add Whitelist',
      'description' => 'Add a new Whitelisted character.',
      'page arguments' => array('eve_api_admin_add_whitelist_form'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 65,
    ) + $admin_base;

    $items['admin/eve_api/role_whitelist'] = array(
      'title' => 'Role Whitelist',
      'description' => 'Edit CEO and Director Whitelist.',
      'page arguments' => array('eve_api_admin_role_whitelist_form'),
      'weight' => 70,
    ) + $admin_base;

    $items['admin/eve_api/role_whitelist/add_role_whitelist'] = array(
      'title' => 'Add Role Whitelist',
      'description' => 'Add a new CEO or Director Whitelist.',
      'page arguments' => array('eve_api_admin_add_role_whitelist_form'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 75,
    ) + $admin_base;

    $items['user/%user/eve_api'] = array(
      'title' => 'List API Keys',
      'page arguments' => array(
        'eve_api_user_list_api_form',
        1,
      ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
    ) + $user_base;

    $items['user/%user/eve_api/add_api_key'] = array(
      'title' => 'Add API Key',
      'description' => 'Add a new API Key.',
      'page arguments' => array(
        'eve_api_user_add_api_form',
        1,
      ),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 0,
    ) + $user_base;

    $items['user/%user/eve_api/update_api_key/%'] = array(
      'title' => 'Update API Key',
      'description' => 'Update an existing API Key.',
      'page arguments' => array(
        'eve_api_user_update_api_form',
        1,
        4,
      ),
      'context' => MENU_CONTEXT_INLINE,
      'type' => MENU_LOCAL_ACTION,
    ) + $user_base;
  }

  return $items;
}

/**
 * Access callback for user omni eve api editing.
 */
function eve_api_edit_access($account) {
  return (($GLOBALS['user']->uid == $account->uid) || user_access('moderate eve_api users')) && $account->uid > 0;
}

/**
 * Implements hook_schema_alter().
 */
function eve_api_schema_alter(&$schema) {
  $schema['users']['fields']['characterID'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'length' => 11,
    'description' => 'Main EVE Character ID',
  );
}

/**
 * Implements hook_permission().
 */
function eve_api_permission() {
  $permissions = array();

  $permissions['administer eve_api settings'] = array(
    'title' => t('Admin EVE API'),
    'description' => t('Allow user to view and edit EVE API Settings.'),
  );

  $permissions['moderate eve_api users'] = array(
    'title' => t('Moderate Users'),
    'description' => t('Allow user to view and edit a users EVE API information.'),
  );

  return $permissions;
}

/**
 * Custom function to get list of all Roles.
 *
 * @return array
 *   A simple array of All the Roles.
 */
function eve_api_role_list() {
  $roles = array();

  $result = db_query('SELECT rid, name FROM {role}');

  if ($result->rowCount()) {
    foreach ($result->fetchAll() as $row) {
      if ($row->rid != 1) {
        $roles[$row->rid] = check_plain($row->name);
      }
    }
  }

  return $roles;
}

/**
 * Implements hook_user_role_delete().
 */
function eve_api_user_role_delete($role) {
  if ($role->rid == variable_get('eve_api_blue_role', 2)) {
    variable_set('eve_api_blue_role', 2);
  }

  if ($role->rid == variable_get('eve_api_alliance_role', 2)) {
    variable_set('eve_api_alliance_role', 2);
  }

  if ($role->rid == variable_get('eve_api_unverified_role', 2)) {
    variable_set('eve_api_unverified_role', 2);
  }

  if ($role->rid == variable_get('eve_api_ceo_role', 2)) {
    variable_set('eve_api_ceo_role', 2);
  }

  if ($role->rid == variable_get('eve_api_director_role', 2)) {
    variable_set('eve_api_director_role', 2);
  }
}

/**
 * Implements hook_user_delete().
 */
function eve_api_user_delete($account) {
  db_update('eve_api_characters_roles')->fields(array('deleted' => 1))->condition('uid', (int) $account->uid)->execute();
  db_update('eve_api_characters')->fields(array('deleted' => 1))->condition('uid', (int) $account->uid)->execute();
  db_delete('eve_api_api_keys')->condition('uid', (int) $account->uid)->execute();
}

/**
 * Override template_preprocess_user_picture().
 *
 * Override template_preprocess_user_pictures() to display user pictures with
 * EVE Online integrationExample URL's.
 * http://image.eveonline.com/Character/1643072492_128.jpg
 * http://image.eveonline.com/Character/1_128.jpg
 *
 * @see template_preprocess_user_picture()
 * @see eve_api_load_account()
 * @see eve_api_get_account_user_picture()
 */
function eve_api_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';

  if (variable_get('user_pictures', 0)) {
    // Load the full user object since it is not provided with nodes, comments,
    // or views displays.
    $account = eve_api_load_account($variables['account']);
    $filepath = eve_api_get_account_user_picture($account);

    if (!empty($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array(
          'style_name' => $style,
          'path' => $filepath,
          'alt' => $alt,
          'title' => $alt,
        ));
      }
      else {
        $variables['user_picture'] = theme('image', array(
          'path' => $filepath,
          'alt' => $alt,
          'title' => $alt,
        ));
      }
      if ($account->uid && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array(
          'attributes' => $attributes,
          'html' => TRUE,
        ));
      }
      elseif (!empty($account->homepage)) {
        // If user is anonymous, create link to the commenter's homepage.
        $attributes = array(
          'title' => t('View user website.'),
          'rel' => 'external nofollow',
        );
        $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array(
          'attributes' => $attributes,
          'html' => TRUE,
        ));
      }
    }
  }
}

/**
 * Unmodified function from"Gravatar v1.1".
 * 
 * By Narno, Git Migration, Dave Reid, podarok, and macedigital.
 *
 * @param array $account
 *   A simple user object.
 * 
 * @return array
 *   A full user object.
 */
function eve_api_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;

    // If a comment is being edited and previewed, the $account->uid is NULL.
    // @todo Remove when http://drupal.org/node/334826 is fixed in 6.x.
    if (!isset($account->uid)) {
      $account->uid = 0;
    }

    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();

    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array(
        'name',
        'mail',
        'homepage',
        'hostname',
      ), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }

  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }

  return $account;
}

/**
 * Original function from"Gravatar v1.1".
 * 
 * by Narno, Git Migration, Dave Reid, podarok, and macedigital.
 * Modified for use with "Omni EVE API".
 *
 * Decide which user picture should be displayed for a user account.
 *
 * @param array $account
 *   A user object.
 * 
 * @return string
 *   A string with the path to the user's picture.
 */
function eve_api_get_account_user_picture($account) {
  $user = user_load($account->uid);

  if (!empty($account->picture->uri)) {
    // If the user has an uploaded picture, use it first.
    return $account->picture->uri;
  }
  elseif (empty($user->characterID)) {
    return eve_api_get_eve_avatar(1);
  }
  else {
    return eve_api_get_eve_avatar($user->characterID);
  }
}

/**
 * Generate a EVE Avatar URL.
 *
 * @param int $character_id
 *   A string with an EVE character ID.
 * 
 * @return string
 *   An URL string with the EVE avatar image.
 */
function eve_api_get_eve_avatar($character_id) {
  global $is_https;

  $eve_avatar = $is_https ? variable_get('eve_api_avatar_https', 'https://image.eveonline.com/Character/') : variable_get('eve_api_avatar_http', 'http://image.eveonline.com/Character/');
  $eve_avatar .= (int) $character_id . '_' . variable_get('eve_api_user_picture_dimensions', '128') . '.jpg';

  return url($eve_avatar);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 *
 * @see eve_api_user_list_api_form_validate()
 * @see eve_api_user_list_api_form_submit()
 *
 * @ingroup forms
 */
function eve_api_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;

  $account = $form_state['user'];
  $category = $form['#user_category'];

  $uid = $account->uid;
  $register = ($account->uid > 0 ? FALSE : TRUE);
  $admin = user_access('administer users');

  $uid_api_list = eve_api_list_api_simple($account->uid);
  $valid_characters_list = eve_api_list_valid_characters($uid_api_list, $account->name);

  $result = db_query('SELECT characterID FROM {users} WHERE characterID = 0 AND uid = :uid', array(
    ':uid' => $uid,
  ));

  if ($result->rowCount()) {
    $valid_characters_list = $valid_characters_list + array($account->name => t('-- Select a New Character --'));
  }

  $form['account']['name'] = array(
    '#type' => 'select',
    '#title' => t('Select your Main Character'),
    '#options' => $valid_characters_list,
    '#description' => t('Detected valid Main Characters.'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('username')),
    '#default_value' => (!$register ? $account->name : ''),
    '#access' => ($register || ($user->uid == $account->uid && user_access('change own username')) || $admin),
    '#weight' => -10,
  );

  $form_state['characterName'] = (!$register ? $account->name : '');

  $form['#validate'][] = 'eve_api_user_profile_form_validate';
  $form['#submit'][] = 'eve_api_user_profile_form_submit';
}

/**
 * Form validation handler for eve_api_form_user_profile_form_alter().
 *
 * @see eve_api_user_profile_form_submit()
 */
function eve_api_user_profile_form_validate($form, &$form_state) {
  $account = $form_state['user'];
  $uid = $account->uid;

  $character_name = (string) $form_state['values']['name'];
  $character_data = eve_api_get_character_info($character_name);

  if ($character_data === FALSE || $character_data['uid'] != $uid) {
    $form_state['values']['name'] = $account->name;
  }

  $form_state['character_data'] = $character_data;
}

/**
 * Form submission handler for eve_api_form_user_profile_form_alter().
 *
 * @see eve_api_user_profile_form_validate()
 */
function eve_api_user_profile_form_submit($form, &$form_state) {
  $account = $form_state['user'];
  $character_data = $form_state['character_data'];
  $uid = (int) $account->uid;

  if (((string) $form_state['characterName'] == (string) $form_state['values']['name'] && $account->characterID != 0) || $character_data === FALSE || $character_data['uid'] != $uid || $character_data['deleted'] == 1) {
    return;
  }

  $old_character_name = (string) $form_state['characterName'];
  $old_character_data = eve_api_get_character_info($old_character_name);

  if ($corporation_role = user_role_load_by_name($old_character_data['corporationName'])) {
    user_multiple_role_edit(array($uid), 'remove_role', $corporation_role->rid);

    $alliance_role = user_role_load(variable_get('eve_api_alliance_role', 2));
    user_multiple_role_edit(array($uid), 'remove_role', $alliance_role->rid);

    $director_role = user_role_load(variable_get('eve_api_director_role', 2));
    user_multiple_role_edit(array($uid), 'remove_role', $director_role->rid);

    $ceo_role = user_role_load(variable_get('eve_api_ceo_role', 2));
    user_multiple_role_edit(array($uid), 'remove_role', $ceo_role->rid);
  }
  elseif ($blue_role = user_role_load(variable_get('eve_api_blue_role', 2))) {
    user_multiple_role_edit(array($uid), 'remove_role', $blue_role->rid);
  }

  $default_role = user_role_load(variable_get('eve_api_unverified_role', 2));
  user_multiple_role_edit(array($uid), 'remove_role', $default_role->rid);

  $character_name = (string) $form_state['values']['name'];
  $character_data = eve_api_get_character_info($character_name);

  $character_is_blue = eve_api_verify_blue($character_data);

  if ($corporation_role = user_role_load_by_name($character_data['corporationName'])) {
    user_multiple_role_edit(array($uid), 'add_role', $corporation_role->rid);

    $alliance_role = user_role_load(variable_get('eve_api_alliance_role', 2));
    user_multiple_role_edit(array($uid), 'add_role', $alliance_role->rid);

    if (eve_api_character_is_director($character_data['characterID'])) {
      $director_role = user_role_load(variable_get('eve_api_director_role', 2));
      user_multiple_role_edit(array($uid), 'add_role', $director_role->rid);
    }

    if (eve_api_character_is_ceo($character_data['characterID'])) {
      $ceo_role = user_role_load(variable_get('eve_api_ceo_role', 2));
      user_multiple_role_edit(array($uid), 'add_role', $ceo_role->rid);
    }
  }
  elseif (($blue_role = user_role_load(variable_get('eve_api_blue_role', 2))) && $character_is_blue) {
    user_multiple_role_edit(array($uid), 'add_role', $blue_role->rid);
  }
  else {
    $default_role = user_role_load(variable_get('eve_api_unverified_role', 2));
    user_multiple_role_edit(array($uid), 'add_role', $default_role->rid);
  }

  db_update('users')->fields(array('characterID' => (int) $character_data['characterID'], 'name' => (string) $character_data['characterName']))->condition('uid', $uid, '=')->execute();

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $queue->createItem(array(
    'uid' => $uid,
    'runs' => 1,
  ));

  module_invoke_all('eve_api_user_update', $account, $form_state['characterName']);
}

/**
 * Return information about external libraries.
 *
 * @return array
 *   An associative array whose keys are internal names of libraries and whose
 *   values are describing each library.
 * @see hook_library()
 */
function eve_api_libraries_info() {
  $libraries['TeamSpeak3'] = array(
    'name' => 'TeamSpeak 3 PHP Framework Library',
    'vendor url' => 'http://forum.teamspeak.com/showthread.php/54132',
    'download url' => 'http://addons.teamspeak.com/directory/tools/integration/TeamSpeak-3-PHP-Framework.html',
    'version callback' => 'eve_api_teamspeak_get_version',
    'files' => array(
      'php' => array(
        'TeamSpeak3.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_boot().
 */
function eve_api_boot() {
  if ($GLOBALS['user']->uid == 0) {
    return;
  }

  if ($GLOBALS['user']->characterID == 0 && variable_get('eve_api_nag_user', TRUE)) {
    drupal_set_message(t('Your account is not associated with an EVE Character, you must select a <a href="@url">Main Character</a>.', array('@url' => '/user/' . $GLOBALS['user']->uid . '/edit')), 'error', FALSE);
  }
}
