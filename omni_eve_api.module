<?php
/**
 * @file
 * The main file for Omni EVE API, where all the magic happens.
 */

/**
 * Return the version number.
 * 
 * x.x.x.x
 * | | | `-- Patch Version Number.
 * | | |
 * | | `---- 0 = Alpha.
 * | |       1 = Beta.
 * | |       2 = RC.
 * | |       3 = Release.
 * | |
 * | `------ Minor Version Change.
 * |
 * `-------- Major Version Change.
 */
function omni_eve_api_version() {
  return '1.0.1.1';
}

/**
 * We need our own Exception, to the Exception.
 */
class OeaException extends Exception {
}

/**
 * Implements hook_cronapi().
 */
function omni_eve_api_cronapi($op, $job = NULL) {
  $items = array();

  $items['omni_eve_api_general_cron'] = array(
    'description' => 'General cron, called once a day.',
    'rule' => '4 0 * * *',
    'file' => 'omni_eve_api.cron.inc',
  );

  $items['omni_eve_api_users_cron'] = array(
    'description' => 'Pull API for each user every hour.',
    'rule' => '0 * * * *',
    'file' => 'omni_eve_api.cron.inc',
  );

  $items['omni_eve_api_teamspeak_user_cron'] = array(
    'description' => 'Update user permissions in Teamspeak every 5 minutes.',
    'rule' => '*/5 * * * *',
    'file' => 'omni_eve_api.cron.inc',
  );

  $items['omni_eve_api_jabber_user_cron'] = array(
    'description' => 'Update user permissions in Jabber every 5 minutes.',
    'rule' => '*/5 * * * *',
    'file' => 'omni_eve_api.cron.inc',
  );

  $items['omni_eve_api_teamspeak_name_cron'] = array(
    'description' => 'Check usernames in Teamspeak every minute.',
    'rule' => '* * * * *',
    'file' => 'omni_eve_api.cron.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function omni_eve_api_menu_alter(&$items) {
  // Ctools registration wizard for standard registration.
  // Overrides default router item defined by core user module.
  $items['user/register']['page callback'] = array('omni_eve_api_register_wizard');
  // Pass the "first" step key to start the form on step 1 if no step has been
  // specified.
  $items['user/register']['page arguments'] = array('enter_api');
  $items['user/register']['file'] = 'omni_eve_api.register.inc';
  $items['user/register']['file path'] = drupal_get_path('module', 'omni_eve_api');

  return $items;
}

/**
 * Implements hook_menu().
 */
function omni_eve_api_menu() {
  $items = array();

  $items['user/register/%'] = array(
    'title' => 'Create New Account',
    'page callback' => 'omni_eve_api_register_wizard',
    'page arguments' => array(2),
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
    'file' => 'omni_eve_api.register.inc',
  );

  $admin_base = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer omni_eve_api settings'),
    'file' => 'omni_eve_api.admin.inc',
  );

  $items['admin/settings/omni_eve_api'] = array(
    'title' => 'EVE API',
    'description' => 'Edit your Alliance API Key if you have not done so, enter it now.',
    'page arguments' => array('omni_eve_api_admin_alliance_api_key_form'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  ) + $admin_base;

  $items['admin/settings/omni_eve_api/alliance_api_key'] = array(
    'title' => 'API Key',
    'description' => 'Edit your Alliance API Key if you have not done so, enter it now.',
    'page arguments' => array('omni_eve_api_admin_alliance_api_key_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  ) + $admin_base;

  if (variable_get('omni_eve_api_enable', FALSE)) {
    $items['admin/settings/omni_eve_api/settings'] = array(
      'title' => 'Roles',
      'description' => 'From here you can change various settings.',
      'page arguments' => array('omni_eve_api_admin_roles_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/registration'] = array(
      'title' => 'Registration',
      'description' => 'Edit your Access Mask and required standing to register on the site.',
      'page arguments' => array('omni_eve_api_admin_registration_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/teamspeak'] = array(
      'title' => 'Teamspeak',
      'description' => 'Configure and edit Teamspeak 3 connection settings.',
      'page arguments' => array('omni_eve_api_admin_teamspeak_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 30,
    ) + $admin_base;

    if (variable_get('omni_eve_api_ts3_enable', FALSE)) {
      $items['admin/settings/omni_eve_api/teamspeak/settings'] = array(
        'title' => 'Settings',
        'page arguments' => array('omni_eve_api_user_teamspeak_settings_form'),
        'type' => MENU_LOCAL_ACTION,
        'weight' => 0,
      ) + $admin_base;
    }

    $items['admin/settings/omni_eve_api/jabber'] = array(
      'title' => 'Jabber',
      'description' => 'Configure and edit Jabber connection settings.',
      'page arguments' => array('omni_eve_api_admin_jabber_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 40,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/list_blues'] = array(
      'title' => 'Blues',
      'description' => 'You can remove Blues and Add Blues from here.',
      'page arguments' => array('omni_eve_api_admin_list_blues_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/list_blues/add_blue'] = array(
      'title' => 'Add Blue',
      'description' => 'You can manually add blues from here.',
      'page arguments' => array('omni_eve_api_admin_add_blues_form'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 0,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/list_whitelist'] = array(
      'title' => 'Whitelist',
      'description' => 'You can remove Whitelisted API Characters and Add Whitelisted API Characters from here.',
      'page arguments' => array('omni_eve_api_admin_list_whitelist_form'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 60,
    ) + $admin_base;

    $items['admin/settings/omni_eve_api/list_whitelist/add_whitelist'] = array(
      'title' => 'Add Whitelist',
      'description' => 'You can manually add Whitelisted API Characters from here.',
      'page arguments' => array('omni_eve_api_admin_add_whitelist_form'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 0,
    ) + $admin_base;

    $user_base = array(
      'page callback' => 'drupal_get_form',
      'access callback' => 'omni_eve_api_edit',
      'access arguments' => array(1),
      'file' => 'omni_eve_api.user.inc',
    );

    $items['user/%user/omni_eve_api'] = array(
      'title' => 'EVE API',
      'page arguments' => array(
        'omni_eve_api_user_list_api_form',
        1,
      ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
    ) + $user_base;

    $items['user/%user/omni_eve_api/list_api'] = array(
      'title' => 'API Keys',
      'page arguments' => array(
        'omni_eve_api_user_list_api_form',
        1,
      ),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ) + $user_base;

    $items['user/%user/omni_eve_api/select_main_character'] = array(
      'title' => 'Main Character',
      'page arguments' => array(
        'omni_eve_api_user_select_main_character_form',
        1,
      ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ) + $user_base;

    $items['user/%user/omni_eve_api/add_api_key'] = array(
      'title' => 'Add API Key',
      'page arguments' => array(
        'omni_eve_api_user_add_api_form',
        1,
      ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    ) + $user_base;

    if (variable_get('omni_eve_api_ts3_enable', FALSE)) {
      $items['user/%user/omni_eve_api/teamspeak'] = array(
        'title' => 'Teamspeak',
        'page arguments' => array(
          'omni_eve_api_user_teamspeak_form',
          1,
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 30,
      ) + $user_base;
    }

    if (variable_get('omni_eve_api_jabber_enable', FALSE)) {
      $items['user/%user/omni_eve_api/jabber'] = array(
        'title' => 'Jabber',
        'page arguments' => array(
          'omni_eve_api_user_jabber_form',
          1,
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 40,
      ) + $user_base;
    }

    $items['user/%user/omni_eve_api/update_api_key/%'] = array(
      'title' => 'Update API Key',
      'page arguments' => array(
        'omni_eve_api_user_update_api_form',
        1,
        4,
      ),
      'context' => MENU_CONTEXT_INLINE,
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
    ) + $user_base;
  }

  return $items;
}

/**
 * Access callback for user omni eve api editing.
 */
function omni_eve_api_edit($account) {
  return (($GLOBALS['user']->uid == $account->uid) || user_access('moderate omni_eve_api users')) && $account->uid > 0;
}

/**
 * Implements hook_schema_alter().
 */
function omni_eve_api_schema_alter(&$schema) {
  $schema['users']['fields']['characterID'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'length' => 11,
    'description' => 'Main EVE Character ID',
  );

  $schema['users']['fields']['teamspeakUID'] = array(
    'type' => 'varchar',
    'not null' => TRUE,
    'default' => 0,
    'length' => 255,
    'description' => 'Unique Teamspeak 3 ID',
  );

  $schema['users']['fields']['teamspeakDBID'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'length' => 10,
    'description' => 'Teamspeak 3 Database ID',
  );
}

/**
 * Implements hook_permission().
 */
function omni_eve_api_permission() {
  $permissions = array();
  $permissions['administer omni_eve_api settings'] = array(
    'title' => t('Admin Omni EVE API'),
    'description' => t('Allow user to view and edit Omni EVE API Settings.'),
  );
  $permissions['moderate omni_eve_api users'] = array(
    'title' => t('Moderate Users'),
    'description' => t('Allow user to view and edit a users EVE API information.'),
  );
  return $permissions;
}

/**
 * Performs an HTTP request.
 *
 * This is a flexible and powerful HTTP client implementation. Correctly
 * handles GET, POST, PUT or any other HTTP requests. Handles redirects.
 * Based on "cURL HTTP Request v1.5" by Vincenzo and minorOffense
 * Based on "Yapeal (http://code.google.com/p/yapeal/)" by Kevin Burkholder
 * Modified for use with "Omni EVE API"
 *
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $query
 *   (optional) An array composed of the url variable elements.
 * @param string $method
 *   (optional) POST, GET, PULL.
 *
 * @return object
 *   An object that can have one or more of the following components:
 *   - request: A string containing the request body that was sent.
 *   - code: An integer containing the response status code, or the error code
 *     if an error occurred.
 *   - protocol: The response protocol (e.g. HTTP/1.1 or HTTP/1.0).
 *   - status_message: The status message from the response, if a response was
 *     received.
 *   - redirect_code: If redirected, an integer containing the initial response
 *     status code.
 *   - redirect_url: If redirected, a string containing the URL of the redirect
 *     target.
 *   - error: If an error occurred, the error message. Otherwise not set.
 *   - errno: If an error occurred, a cURL error number greater than 0.
 *     Otherwise set to 0.
 *   - headers: An array containing the response headers as name/value pairs.
 *     HTTP header names are case-insensitive (RFC 2616, section 4.2), so for
 *     easy access the array keys are returned in lower case.
 *   - data: A string containing the response body that was received.
 */
function omni_eve_api_curl_http_request($url, array $query = array(), $method = 'POST') {
  $result = new stdClass();

  // Parse the URL and make sure we can handle the schema.
  $uri = @parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;
    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    $result->code = -1002;
    return $result;
  }

  timer_start(__FUNCTION__);

  // Merge the default options.
  $options = array(
    'data' => $query,
    'headers' => array(),
    'method' => $method,
    'timeout' => 45,
    'http_proxy' => variable_get('http_proxy'),
    'https_proxy' => variable_get('https_proxy'),
  );

  // Select the right proxy for the right protocol.
  $proxy = ('https' == $uri['scheme']) ? $options['https_proxy'] : $options['http_proxy'];

  // Nullify the proxy if the host to send the request to is part of the proxy's
  // exceptions.
  if ((!empty($proxy['exceptions'])) && (array_key_exists($uri['host'], $proxy['exceptions']))) {
    $proxy = NULL;
  }

  $curl = curl_version();
  $user_agent = 'Drupal (+http://drupal.org/)';
  $user_agent .= ' Omni EVE API/' . omni_eve_api_version();
  $user_agent .= ' (' . PHP_OS . ' ' . php_uname('m') . ')';
  $user_agent .= ' libcurl/' . $curl['version'];
  $user_agent = trim($user_agent);

  $curl_opt = array(
    CURLOPT_HEADER => TRUE,
    CURLINFO_HEADER_OUT => TRUE,
    CURLOPT_TIMEOUT => $options['timeout'],
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_MAXREDIRS => 5,
    CURLOPT_NOBODY => FALSE,
    CURLOPT_FORBID_REUSE => FALSE,
    CURLOPT_LOW_SPEED_LIMIT => 10,
    CURLOPT_LOW_SPEED_TIME => ceil($options['timeout'] / 4),
    CURLOPT_MAXCONNECTS => 5,
    CURLOPT_CONNECTTIMEOUT => ceil($options['timeout'] / 2),
    CURLOPT_REFERER => 'http://danlee.ca/git/',
    CURLOPT_UNRESTRICTED_AUTH => TRUE,
    CURLOPT_ENCODING => 'gzip',
    CURLOPT_BINARYTRANSFER => FALSE,
    CURLOPT_USERAGENT => $user_agent,
    CURLOPT_SSL_VERIFYPEER => TRUE,
    CURLOPT_SSL_VERIFYHOST => 2,
    CURLOPT_CAINFO => drupal_get_path('module', 'omni_eve_api') . '/eveonline.crt',
    CURLOPT_COOKIEJAR => drupal_get_path('module', 'omni_eve_api') . '/cookies.txt',
  );

  $ssl_version = $curl['ssl_version'];
  $has_nss = (strpos($ssl_version, "NSS") > -1);

  if ($has_nss) {
    $curl_opt += array(CURLOPT_SSL_CIPHER_LIST => 'rsa_aes_128_sha,rsa_aes_256_sha,rsa_3des_sha,rsa_rc4_128_sha,rsa_rc4_128_md5');
  }
  else {
    $curl_opt += array(CURLOPT_SSL_CIPHER_LIST => 'AES128-SHA AES256-SHA DES-CBC3-SHA RC4-SHA RC4-MD5');
  }

  if (!empty($proxy)) {
    $proxy_options = array(
      CURLOPT_PROXY => $proxy['server'],
      CURLOPT_PROXYPORT => $proxy['port'],
    );
    // For the time being let's just support HTTP proxies with basic
    // authentication.
    if (isset($proxy['username']) && isset($proxy['password'])) {
      $proxy_options += array(
        CURLOPT_PROXYUSERPWD => implode(':', array(
          $proxy['username'],
          $proxy['password'],
        )),
        CURLOPT_PROXYTYPE => CURLPROXY_HTTP,
        CURLOPT_PROXYAUTH => CURLAUTH_BASIC,
      );
    }
    $curl_opt += $proxy_options;
  }

  $default_ports = array(
    'http' => 80,
    'feed' => 80,
    'https' => 443,
  );

  if (array_key_exists($uri['scheme'], $default_ports)) {
    if (!isset($uri['port'])) {
      $uri['port'] = $default_ports[$uri['scheme']];
    }
    // RFC 2616: "non-standard ports MUST, default ports MAY be included".
    // We don't add the standard port to prevent from breaking rewrite rules
    // checking the host that do not take into account the port number.
    $options['headers']['Host'] = $uri['host'] . ($uri['port'] != 80 ? ':' . $uri['port'] : '');
  }
  else {
    $result->error = 'invalid schema ' . $uri['scheme'];
    $result->code = -1003;
    return $result;
  }

  // Merge the default headers.
  $options['headers'] += array(
    'User-Agent' => 'Drupal (+http://drupal.org/)',
  );

  // Only add Content-Length if we actually have any content or if it is a POST
  // or PUT request. Some non-standard servers get confused by Content-Length in
  // at least HEAD/GET requests, and Squid always requires Content-Length in
  // POST/PUT requests.
  $content_length = strlen(drupal_http_build_query($options['data']));
  if ($content_length > 0 || $options['method'] == 'POST' || $options['method'] == 'PUT') {
    $options['headers']['Content-Length'] = $content_length;
  }

  // If the server URL has a user then attempt to use basic authentication.
  if (isset($uri['user'])) {
    $options['headers']['Authorization'] = 'Basic ' . base64_encode($uri['user'] . (isset($uri['pass']) ? ':' . $uri['pass'] : ''));
  }

  // Set all the headers.
  $curl_opt[CURLOPT_HTTPHEADER] = array();
  foreach ($options['headers'] as $name => $value) {
    $curl_opt[CURLOPT_HTTPHEADER][] = $name . ": " . trim($value);
  }

  // Set the request method.
  switch ($options['method']) {
    case 'GET':
      $curl_opt[CURLOPT_HTTPGET] = TRUE;
      break;

    case 'POST':
      $curl_opt[CURLOPT_POST] = TRUE;
      if (!empty($options['data'])) {
        $curl_opt[CURLOPT_POSTFIELDS] = drupal_http_build_query($options['data']);
        $options['headers'] += array(
          'Content-Type' => 'application/x-www-form-urlencoded',
        );
      }
      break;

    case 'PUT':
      $curl_opt[CURLOPT_PUT] = TRUE;
      break;

    default:
      $result->error = 'invalid method ' . $options['method'];
      $result->code = -1004;
      return $result;
  }

  // Make the request.
  $ch = curl_init($url);
  curl_setopt_array($ch, $curl_opt);

  // Full response stored. To be parsed later on and split in protocol, code,
  // status message, and response headers.
  $result->data = trim(curl_exec($ch));
  $result->error = curl_error($ch);
  $result->errno = curl_errno($ch);

  // If there's been an error, do not continue.
  if ($result->error) {
    // Request timed out.
    if (CURLE_OPERATION_TIMEOUTED == $result->errno) {
      $result->code = HTTP_REQUEST_TIMEOUT;
      $result->error = 'request timed out';
      return $result;
    }
    $result->code = $result->errno;
    return $result;
  }

  // The last effective URL should correspond to the Redirect URL.
  $result->redirect_url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);

  // Save the request sent into the result object.
  $result->request = curl_getinfo($ch, CURLINFO_HEADER_OUT);

  // Parse response headers from the response body.
  // Be tolerant of malformed HTTP responses that separate header and body with
  // \n\n or \r\r instead of \r\n\r\n.
  list($response, $result->data) = preg_split("/\r\n\r\n|\n\n|\r\r/", $result->data, 2);

  // Sometimes when making an HTTP request via proxy using cURL, you end up with
  // a multiple set of headers:
  // from the web server being the actual target, from the proxy itself, etc.
  // The following 'if' statement is to check for such a situation and make sure
  // we get a proper split between
  // actual response body and actual response headers both coming from the web
  // server.
  while ('HTTP/' == substr($result->data, 0, 5)) {
    list($response, $result->data) = preg_split("/\r\n\r\n|\n\n|\r\r/", $result->data, 2);
  }

  $response = preg_split("/\r\n|\n|\r/", $response);

  // Parse the response status line.
  list($protocol, $code, $status_message) = explode(' ', trim(array_shift($response)), 3);
  $result->protocol = $protocol;
  $result->status_message = $status_message;

  $result->headers = array();

  // Parse the response headers.
  while ($line = trim(array_shift($response))) {
    list($name, $value) = explode(':', $line, 2);
    $name = strtolower($name);
    if (isset($result->headers[$name]) && $name == 'set-cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$name] .= ',' . trim($value);
    }
    else {
      $result->headers[$name] = trim($value);
    }
  }

  $responses = array(
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  );
  // RFC 2616 states that all unknown HTTP codes must be treated the same as the
  // base code in their class.
  if (!isset($responses[$code])) {
    $code = floor($code / 100) * 100;
  }
  $result->code = $code;

  switch ($code) {
    case 200:
      // OK.
    case 304:
      // Not modified.
      break;

    case 301:
      // Moved permanently.
    case 302:
      // Moved temporarily.
    case 307:
      // Moved temporarily.
      $location = $result->headers['location'];
      $options['timeout'] -= timer_read(__FUNCTION__) / 1000;
      if ($options['timeout'] <= 0) {
        $result->code = HTTP_REQUEST_TIMEOUT;
        $result->error = 'request timed out';
      }
      elseif ($options['max_redirects']) {
        // Redirect to the new location.
        $options['max_redirects']--;
        $result = curl_http_request($location, $options);
        $result->redirect_code = $code;
      }
      if (!isset($result->redirect_url)) {
        $result->redirect_url = $location;
      }
      break;

    default:
      $result->error = $status_message;
  }

  curl_close($ch);
  return $result;
}

/**
 * Custom function to get list of all Roles.
 *
 * @return array
 *   A simple array of All the Roles.
 */
function omni_eve_api_role_list() {
  $roles = array();

  $result = db_query('SELECT rid, name FROM {role}');

  if ($result->rowCount()) {
    foreach ($result->fetchAll() as $row) {
      if ($row->rid != 1) {
        $roles[$row->rid] = check_plain($row->name);
      }
    }
  }

  return $roles;
}

/**
 * Implements hook_user_role_delete().
 */
function omni_eve_api_user_role_delete($role) {
  if ($role->rid == variable_get('omni_eve_api_blue_role', 2)) {
    variable_set('omni_eve_api_blue_role', 2);
  }

  if ($role->rid == variable_get('omni_eve_api_alliance_role', 2)) {
    variable_set('omni_eve_api_alliance_role', 2);
  }

  if ($role->rid == variable_get('omni_eve_api_unverified_role', 2)) {
    variable_set('omni_eve_api_unverified_role', 2);
  }

  if ($role->rid == variable_get('omni_eve_api_ceo_role', 2)) {
    variable_set('omni_eve_api_ceo_role', 2);
  }

  if ($role->rid == variable_get('omni_eve_api_director_role', 2)) {
    variable_set('omni_eve_api_director_role', 2);
  }
}

/**
 * Implements hook_user_delete().
 */
function omni_eve_api_user_delete($account) {
  module_load_include('inc', 'omni_eve_api', 'omni_eve_api.api');

  try {
    omni_eve_api_jabber_connect();

    $result = db_query('SELECT username FROM {ofUser} WHERE username = :username', array(
      ':username' => (string) omni_eve_api_jabber_format_name($account->name),
    ));

    if ($result->rowCount()) {
      omni_eve_api_jabber_url_query('delete', $account->name);
    }

    omni_eve_api_jabber_disconnect();
  }
  catch (OeaException $e) {
    // Log Error ?
  }

  try {
    $ts3 = omni_eve_api_teamspeak_connection();
    omni_eve_api_teamspeak_user_delete($ts3, $account->teamspeakDBID);
  }
  catch (OeaException $e) {
    // Log Error ?
  }

  $uid = (int) $account->uid;

  db_delete('oea_characters')->condition('uid', $uid)->execute();
  db_delete('oea_api_keys')->condition('uid', $uid)->execute();
}

/**
 * Override template_preprocess_user_picture().
 *
 * Override template_preprocess_user_pictures() to display user pictures with
 * EVE Online integrationExample URL's.
 * http://image.eveonline.com/Character/1643072492_128.jpg
 * http://image.eveonline.com/Character/1_128.jpg
 *
 * @see template_preprocess_user_picture()
 * @see omni_eve_api_load_account()
 * @see omni_eve_api_get_account_user_picture()
 */
function omni_eve_api_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';

  if (variable_get('user_pictures', 0)) {
    // Load the full user object since it is not provided with nodes, comments,
    // or views displays.
    $account = omni_eve_api_load_account($variables['account']);
    $filepath = omni_eve_api_get_account_user_picture($account);

    if (!empty($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array(
          'style_name' => $style,
          'path' => $filepath,
          'alt' => $alt,
          'title' => $alt,
        ));
      }
      else {
        $variables['user_picture'] = theme('image', array(
          'path' => $filepath,
          'alt' => $alt,
          'title' => $alt,
        ));
      }
      if ($account->uid && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array(
          'attributes' => $attributes,
          'html' => TRUE,
        ));
      }
      elseif (!empty($account->homepage)) {
        // If user is anonymous, create link to the commenter's homepage.
        $attributes = array(
          'title' => t('View user website.'),
          'rel' => 'external nofollow',
        );
        $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array(
          'attributes' => $attributes,
          'html' => TRUE,
        ));
      }
    }
  }
}

/**
 * Unmodified function from"Gravatar v1.1".
 * 
 * By Narno, Git Migration, Dave Reid, podarok, and macedigital.
 *
 * @param array $account
 *   A simple user object.
 * 
 * @return array
 *   A full user object.
 */
function omni_eve_api_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;

    // If a comment is being edited and previewed, the $account->uid is NULL.
    // @todo Remove when http://drupal.org/node/334826 is fixed in 6.x.
    if (!isset($account->uid)) {
      $account->uid = 0;
    }

    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();

    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array(
        'name',
        'mail',
        'homepage',
        'hostname',
      ), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }

  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }

  return $account;
}

/**
 * Original function from"Gravatar v1.1".
 * 
 * by Narno, Git Migration, Dave Reid, podarok, and macedigital.
 * Modified for use with "Omni EVE API".
 *
 * Decide which user picture should be displayed for a user account.
 *
 * @param array $account
 *   A user object.
 * 
 * @return string
 *   A string with the path to the user's picture.
 */
function omni_eve_api_get_account_user_picture($account) {
  $user = user_load($account->uid);

  if (!empty($account->picture->uri)) {
    // If the user has an uploaded picture, use it first.
    return $account->picture->uri;
  }
  elseif (empty($user->characterID)) {
    return omni_eve_api_get_eve_avatar(1);
  }
  else {
    return omni_eve_api_get_eve_avatar($user->characterID);
  }
}

/**
 * Generate a EVE Avatar URL.
 *
 * @param int $character_id
 *   A string with an EVE character ID.
 * 
 * @return string
 *   An URL string with the EVE avatar image.
 */
function omni_eve_api_get_eve_avatar($character_id) {
  global $is_https;

  $eve_avatar = $is_https ? variable_get('omni_eve_api_avatar_https', 'https://image.eveonline.com/Character/') : variable_get('omni_eve_api_avatar_http', 'http://image.eveonline.com/Character/');
  $eve_avatar .= (int) $character_id . '_' . variable_get('omni_eve_api_user_picture_dimensions', '128') . '.jpg';

  return url($eve_avatar);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 */
function omni_eve_api_form_user_profile_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'omni_eve_api', 'omni_eve_api.api');

  $account = $form['#user'];

  $register = ($account->uid > 0 ? FALSE : TRUE);
  $admin = user_access('administer users');

  $uid_api_list = omni_eve_api_list_api_simple($account->uid);

  $form['account']['name'] = array(
    '#type' => 'select',
    '#title' => t('Select your Main Character'),
    '#default_value' => (!$register ? $account->name : ''),
    '#options' => omni_eve_api_list_valid_characters($uid_api_list, $account->name),
    '#description' => t('Detected valid Main Characters.'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('username')),
    '#access' => ($register || $admin),
    '#weight' => -10,
  );
}

/**
 * Return information about external libraries.
 *
 * @return array
 *   An associative array whose keys are internal names of libraries and whose
 *   values are describing each library.
 * @see hook_library()
 */
function omni_eve_api_libraries_info() {
  $libraries['TeamSpeak3'] = array(
    'name' => 'Teamspeak 3 PHP Framework Library',
    'vendor url' => 'http://forum.teamspeak.com/showthread.php/54132',
    'download url' => 'http://addons.teamspeak.com/directory/tools/integration/TeamSpeak-3-PHP-Framework.html',
    'version callback' => 'omni_eve_api_teamspeak_get_version',
    'files' => array(
      'php' => array(
        'TeamSpeak3.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Check the TeamSpeak 3 PHP Framework version.
 *
 * @return string
 *   The version of the TeamSpeak 3 PHP Framework.
 */
function omni_eve_api_teamspeak_get_version() {
  $libraries = libraries_get_libraries();

  if (isset($libraries['TeamSpeak3'])) {
    $path = libraries_get_path('TeamSpeak3');

    if (file_exists($path . '/TeamSpeak3.php')) {
      require_once $path . '/TeamSpeak3.php';

      $teamspeak_version = TeamSpeak3::LIB_VERSION;

      return $teamspeak_version;
    }
    else {
      return '0.0.0';
    }
  }
  else {
    return '0.0.0';
  }
}

/**
 * Sanitize input variable, used for Teamspeak messages.
 *
 * @param string $input
 *   A dirty string.
 *
 * @return string
 *   A clean string.
 */
function omni_eve_api_clean_input($input) {
  return trim(preg_replace('/ +/', ' ', preg_replace('|[^[:alnum:][:punct:]\s]|', ' ', urldecode(html_entity_decode(strip_tags((string) $input))))));
}

/**
 * Implements hook_boot().
 */
function omni_eve_api_boot() {
  if ($GLOBALS['user']->uid == 0) {
    return;
  }

  if ($GLOBALS['user']->characterID == 0) {
    drupal_set_message(t('Your account is not associated with an EVE Character, you must select a <a href="@url">Main Character</a>.', array('@url' => '/user/' . $GLOBALS['user']->uid . '/omni_eve_api/select_main_character')), 'error');
    // url('user/' . $GLOBALS['user']->uid .
    // '/omni_eve_api/select_main_character')
  }
}
